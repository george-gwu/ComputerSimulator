00000000000000000000    64: HLT
00001100000000010101    65: LDA(R0,21)  // Set variable to (offset from section tag)
00111000000001100100    66: JSR(100)   R3=RET   // Call printstr
00000000000000000000    67: HLT
00000000000000000000    68: HLT
00000000000000000000    69: HLT
00000000000000000000    70: HLT
00000000000000000000    71: HLT
00000000000000000000    72: HLT
00000000000000000000    73: HLT
00000000000000000000    74: HLT
00000000000000000000    75: HLT
00000000000000000000    76: HLT
00000000000000000000    77: HLT
00000000000000000000    78: HLT
00000000000000000000    79: HLT
00000000000000000000    80: HLT
00000000000000000000    81: HLT
00000000000000000000    82: HLT
00000000000000000000    83: HLT
00000000000000000000    84: HLT
00000000000000000000    85: HLT
00000000000000000000    86: HLT
00000000000000000000    87: HLT
00000000000000000000    88: HLT
00000000000000000000    89: HLT
00000000000000000000    90: HLT
00000000000000000000    91: HLT
00000000000000000000    92: HLT
00000000000000000000    93: HLT
00000000000000000000    94: HLT
00000000000000000000    95: HLT
00000000000000000000    96: HLT
00000000000000000000    97: HLT
00000000000000000000    98: HLT
00000000000000000000    99: HLT
00001100010000000000    100: printstr: LDA(R1, 0)  /// set R1 to 0   -----     R0 is # to add
01100001000000000000    101: OR(R1, R0)  // copy R0 to R1
00010000010000001000    102: AMR(R1, 8)  // set R1 = R1 + C(8)
00001000010000000110    103: STR(R1, 6)  // set M(6) to R1 (used below)
00000100011000000110    104: LDR(R1, IX:1, I:0 6) // set R1 to the EA of c(6) which is a data section
00001100100001111111    105: LDA(R2, 0x01111111)
01011110010000000000    106: AND(R2, R1)  Mask low order bits
11111000100000000001    107: OUT(R2, PRINTER) 
01111100011000000111    108: SRC(R1,r,7)
11111000010000000001    109: OUT(R1, PRINTER) 
00011000000000000001    110: AIR(R0,1) R0++
00001100100000000000    111: LDA(R2, 0)   set R2 to 0
01011001100000000000    112: TRR(R1, R2) test r1 (last char) to 0 null byte    
00110000110001110011    113: JCC(3,x,end_printstr)  end_printstr=115  // if null terminated, jmp to end (115)
00110100000001100100    114: JMP(100)  // else, not null, loop
00111100000000000000    115: RFS
11001100110011001100    SECTION_TAG: Everything below here is .data
00000011011001010000    0001: lP \108\80
00000011000011100101    0002: ae \97\101
00000011001011110011    0003: es \101\115
00000010010010100000    0004: I  \73\32
00000011100001101110    0005: pn \112\110
00000011101001110101    0006: tu \116\117
00000001100100100000    0007: 2  \50\32
00000001000000110000    0008:  0 \32\48
00000011101011001110    0009: uN \117\78
00000011000101101101    0010: bm \98\109
00000011100101100101    0011: re \114\101
00000001110101110011    0012: :s \58\115
00000001111100001010    0013: >  \62\10
00000000000000000000    0014:    \0\0
00000011010001010100    0015: hT \104\84
00000011011101100001    0016: na \110\97
00000001000001101011    0017:  k \32\107
00000011011111111001    0018: oy \111\121
00000001000011110101    0019: !u \33\117
00000000000000000000    0020:    \0\0
00000011011111001110    0021: oN \111\78
00000001011001110111    0022: ,w \44\119
00000011010010100000    0023: i  \105\32
00000011100001101110    0024: pn \112\110
00000011101001110101    0025: tu \116\117
00000011011110100000    0026: o  \111\32
00000011001011101110    0027: en \101\110
00000011011100100000    0028: n  \110\32
00000011011011110101    0029: mu \109\117
00000011001011100010    0030: eb \101\98
00000001110101110010    0031: :r \58\114
00000001111100001010    0032: >  \62\10
00000000000000000000    0033:    \0\0
11001100110011001100    SECTION_TAG: Everything below here is free space