00000000000000000000    64: HLT
00001100000000000001    65: LDA(R0,1)  // Set variable to (offset from section tag)
00111000000001000110    66: JSR(70)   R3=RET   // Call printstr
00000000000000000000    67: HLT
00000000000000000000    68: HLT
00000000000000000000    69: HLT
00001100010000000000    70: printstr: LDA(R1, 0)  /// set R1 to 0   -----     R0 is # to add
01100001000000000000    71: OR(R1, R0)  // copy R0 to R1
00010000010000001000    72: AMR(R1, 8)  // set R1 = R1 + C(8)
00001000010000000110    73: STR(R1, 6)  // set M(6) to R1 (used below)
00000100011000000110    74: LDR(R1, IX:1, I:0 6) // set R1 to the EA of c(6) which is a data section
00001100100001111111    75: LDA(R2, 0x01111111)
01011110010000000000    76: AND(R2, R1)  Mask low order bits
11111000100000000001    77: OUT(R2, PRINTER) 
01111100011000000111    78: SRC(R1,r,7)
11111000010000000001    79: OUT(R1, PRINTER) 
00011000000000000001    80: R0++
00001100100000000000    81: LDA(R2, 0)   set R2 to 0
01011001100000000000    82: TRR(R1, R2) test r1 (last char) to 0 null byte    
00110000110001010101    83: JCC(3,x,end_printstr)  end_printstr=85  // if null terminated, jmp to end (85)
00110100000001000110    84: JMP(70)  // else, not null, loop
00111100000000000000    85: RFS
11001100110011001100    SECTION_TAG: Everything below here is .data
00000011011001010000    0000: lP \108\80
00000011000011100101    0001: ae \97\101
00000011001011110011    0002: es \101\115
00000001111100001010    0012: >  \62\10
00000000000000000000    0013:    \0\0
11001100110011001100    SECTION_TAG: Everything below here is free space